# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  about(relativePath: String): About!
  aboutConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AboutFilter): AboutConnection!
  banner(relativePath: String): Banner!
  bannerConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BannerFilter): BannerConnection!
  results(relativePath: String): Results!
  resultsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ResultsFilter): ResultsConnection!
  reviews(relativePath: String): Reviews!
  reviewsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ReviewsFilter): ReviewsConnection!
}

input DocumentFilter {
  about: AboutFilter
  banner: BannerFilter
  results: ResultsFilter
  reviews: ReviewsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = About | Banner | Results | Reviews | Folder

type AboutGeneralUkEducation {
  institution: String
}

type AboutGeneralUkExperience {
  point: String
}

type AboutGeneralUk {
  name: String!
  profession: String!
  education: [AboutGeneralUkEducation]
  experience: [AboutGeneralUkExperience]
}

type AboutGeneralEnEducation {
  institution: String
}

type AboutGeneralEnExperience {
  point: String
}

type AboutGeneralEn {
  name: String!
  profession: String!
  education: [AboutGeneralEnEducation]
  experience: [AboutGeneralEnExperience]
}

type AboutGeneral {
  uk: AboutGeneralUk
  en: AboutGeneralEn
}

type AboutEducationUkInstitutions {
  period: String
  institution: String
}

type AboutEducationUk {
  title: String!
  institutions: [AboutEducationUkInstitutions]
}

type AboutEducationEnInstitutions {
  period: String
  institution: String
}

type AboutEducationEn {
  title: String!
  institutions: [AboutEducationEnInstitutions]
}

type AboutEducation {
  uk: AboutEducationUk
  en: AboutEducationEn
}

type AboutCareerUkInstitutions {
  period: String
  institution: String
}

type AboutCareerUk {
  title: String!
  institutions: [AboutCareerUkInstitutions]
}

type AboutCareerEnInstitutions {
  period: String
  institution: String
}

type AboutCareerEn {
  title: String!
  institutions: [AboutCareerEnInstitutions]
}

type AboutCareer {
  uk: AboutCareerUk
  en: AboutCareerEn
}

type AboutCertificatesDescriptionUk {
  alt: String!
}

type AboutCertificatesDescriptionEn {
  alt: String!
}

type AboutCertificatesDescription {
  uk: AboutCertificatesDescriptionUk
  en: AboutCertificatesDescriptionEn
}

type AboutCertificates {
  photo: String!
  description: AboutCertificatesDescription!
}

type About implements Node & Document {
  photo: String
  video: String
  general: AboutGeneral!
  education: AboutEducation!
  career: AboutCareer!
  certificates: [AboutCertificates!]!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input AboutGeneralUkEducationFilter {
  institution: StringFilter
}

input AboutGeneralUkExperienceFilter {
  point: StringFilter
}

input AboutGeneralUkFilter {
  name: StringFilter
  profession: StringFilter
  education: AboutGeneralUkEducationFilter
  experience: AboutGeneralUkExperienceFilter
}

input AboutGeneralEnEducationFilter {
  institution: StringFilter
}

input AboutGeneralEnExperienceFilter {
  point: StringFilter
}

input AboutGeneralEnFilter {
  name: StringFilter
  profession: StringFilter
  education: AboutGeneralEnEducationFilter
  experience: AboutGeneralEnExperienceFilter
}

input AboutGeneralFilter {
  uk: AboutGeneralUkFilter
  en: AboutGeneralEnFilter
}

input AboutEducationUkInstitutionsFilter {
  period: StringFilter
  institution: StringFilter
}

input AboutEducationUkFilter {
  title: StringFilter
  institutions: AboutEducationUkInstitutionsFilter
}

input AboutEducationEnInstitutionsFilter {
  period: StringFilter
  institution: StringFilter
}

input AboutEducationEnFilter {
  title: StringFilter
  institutions: AboutEducationEnInstitutionsFilter
}

input AboutEducationFilter {
  uk: AboutEducationUkFilter
  en: AboutEducationEnFilter
}

input AboutCareerUkInstitutionsFilter {
  period: StringFilter
  institution: StringFilter
}

input AboutCareerUkFilter {
  title: StringFilter
  institutions: AboutCareerUkInstitutionsFilter
}

input AboutCareerEnInstitutionsFilter {
  period: StringFilter
  institution: StringFilter
}

input AboutCareerEnFilter {
  title: StringFilter
  institutions: AboutCareerEnInstitutionsFilter
}

input AboutCareerFilter {
  uk: AboutCareerUkFilter
  en: AboutCareerEnFilter
}

input AboutCertificatesDescriptionUkFilter {
  alt: StringFilter
}

input AboutCertificatesDescriptionEnFilter {
  alt: StringFilter
}

input AboutCertificatesDescriptionFilter {
  uk: AboutCertificatesDescriptionUkFilter
  en: AboutCertificatesDescriptionEnFilter
}

input AboutCertificatesFilter {
  photo: ImageFilter
  description: AboutCertificatesDescriptionFilter
}

input AboutFilter {
  photo: ImageFilter
  video: StringFilter
  general: AboutGeneralFilter
  education: AboutEducationFilter
  career: AboutCareerFilter
  certificates: AboutCertificatesFilter
}

type AboutConnectionEdges {
  cursor: String!
  node: About
}

type AboutConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AboutConnectionEdges]
}

type BannerUk {
  title: String!
  description: String!
}

type BannerEn {
  title: String!
  description: String!
}

type Banner implements Node & Document {
  uk: BannerUk
  en: BannerEn
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input BannerUkFilter {
  title: StringFilter
  description: StringFilter
}

input BannerEnFilter {
  title: StringFilter
  description: StringFilter
}

input BannerFilter {
  uk: BannerUkFilter
  en: BannerEnFilter
}

type BannerConnectionEdges {
  cursor: String!
  node: Banner
}

type BannerConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BannerConnectionEdges]
}

type ResultsCaseContentUk {
  title: String!
  description: JSON!
}

type ResultsCaseContentEn {
  title: String!
  description: JSON!
}

type ResultsCaseContent {
  uk: ResultsCaseContentUk
  en: ResultsCaseContentEn
}

type ResultsCase {
  date: String
  content: ResultsCaseContent
  before: String!
  after: String!
}

type Results implements Node & Document {
  case: [ResultsCase]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input ResultsCaseContentUkFilter {
  title: StringFilter
  description: RichTextFilter
}

input ResultsCaseContentEnFilter {
  title: StringFilter
  description: RichTextFilter
}

input ResultsCaseContentFilter {
  uk: ResultsCaseContentUkFilter
  en: ResultsCaseContentEnFilter
}

input ResultsCaseFilter {
  date: DatetimeFilter
  content: ResultsCaseContentFilter
  before: ImageFilter
  after: ImageFilter
}

input ResultsFilter {
  case: ResultsCaseFilter
}

type ResultsConnectionEdges {
  cursor: String!
  node: Results
}

type ResultsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ResultsConnectionEdges]
}

type ReviewsUkCase {
  date: String!
  photo: String!
  video: String
  name: String!
  telegram: String
  review: JSON
}

type ReviewsUk {
  case: [ReviewsUkCase]
}

type ReviewsEnCase {
  date: String!
  photo: String!
  video: String
  name: String!
  telegram: String
  review: JSON
}

type ReviewsEn {
  case: [ReviewsEnCase]
}

type Reviews implements Node & Document {
  uk: ReviewsUk
  en: ReviewsEn
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ReviewsUkCaseFilter {
  date: DatetimeFilter
  photo: ImageFilter
  video: StringFilter
  name: StringFilter
  telegram: StringFilter
  review: RichTextFilter
}

input ReviewsUkFilter {
  case: ReviewsUkCaseFilter
}

input ReviewsEnCaseFilter {
  date: DatetimeFilter
  photo: ImageFilter
  video: StringFilter
  name: StringFilter
  telegram: StringFilter
  review: RichTextFilter
}

input ReviewsEnFilter {
  case: ReviewsEnCaseFilter
}

input ReviewsFilter {
  uk: ReviewsUkFilter
  en: ReviewsEnFilter
}

type ReviewsConnectionEdges {
  cursor: String!
  node: Reviews
}

type ReviewsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ReviewsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateAbout(relativePath: String!, params: AboutMutation!): About!
  createAbout(relativePath: String!, params: AboutMutation!): About!
  updateBanner(relativePath: String!, params: BannerMutation!): Banner!
  createBanner(relativePath: String!, params: BannerMutation!): Banner!
  updateResults(relativePath: String!, params: ResultsMutation!): Results!
  createResults(relativePath: String!, params: ResultsMutation!): Results!
  updateReviews(relativePath: String!, params: ReviewsMutation!): Reviews!
  createReviews(relativePath: String!, params: ReviewsMutation!): Reviews!
}

input DocumentUpdateMutation {
  about: AboutMutation
  banner: BannerMutation
  results: ResultsMutation
  reviews: ReviewsMutation
  relativePath: String
}

input DocumentMutation {
  about: AboutMutation
  banner: BannerMutation
  results: ResultsMutation
  reviews: ReviewsMutation
}

input AboutGeneralUkEducationMutation {
  institution: String
}

input AboutGeneralUkExperienceMutation {
  point: String
}

input AboutGeneralUkMutation {
  name: String
  profession: String
  education: [AboutGeneralUkEducationMutation]
  experience: [AboutGeneralUkExperienceMutation]
}

input AboutGeneralEnEducationMutation {
  institution: String
}

input AboutGeneralEnExperienceMutation {
  point: String
}

input AboutGeneralEnMutation {
  name: String
  profession: String
  education: [AboutGeneralEnEducationMutation]
  experience: [AboutGeneralEnExperienceMutation]
}

input AboutGeneralMutation {
  uk: AboutGeneralUkMutation
  en: AboutGeneralEnMutation
}

input AboutEducationUkInstitutionsMutation {
  period: String
  institution: String
}

input AboutEducationUkMutation {
  title: String
  institutions: [AboutEducationUkInstitutionsMutation]
}

input AboutEducationEnInstitutionsMutation {
  period: String
  institution: String
}

input AboutEducationEnMutation {
  title: String
  institutions: [AboutEducationEnInstitutionsMutation]
}

input AboutEducationMutation {
  uk: AboutEducationUkMutation
  en: AboutEducationEnMutation
}

input AboutCareerUkInstitutionsMutation {
  period: String
  institution: String
}

input AboutCareerUkMutation {
  title: String
  institutions: [AboutCareerUkInstitutionsMutation]
}

input AboutCareerEnInstitutionsMutation {
  period: String
  institution: String
}

input AboutCareerEnMutation {
  title: String
  institutions: [AboutCareerEnInstitutionsMutation]
}

input AboutCareerMutation {
  uk: AboutCareerUkMutation
  en: AboutCareerEnMutation
}

input AboutCertificatesDescriptionUkMutation {
  alt: String
}

input AboutCertificatesDescriptionEnMutation {
  alt: String
}

input AboutCertificatesDescriptionMutation {
  uk: AboutCertificatesDescriptionUkMutation
  en: AboutCertificatesDescriptionEnMutation
}

input AboutCertificatesMutation {
  photo: String
  description: AboutCertificatesDescriptionMutation
}

input AboutMutation {
  photo: String
  video: String
  general: AboutGeneralMutation
  education: AboutEducationMutation
  career: AboutCareerMutation
  certificates: [AboutCertificatesMutation]
}

input BannerUkMutation {
  title: String
  description: String
}

input BannerEnMutation {
  title: String
  description: String
}

input BannerMutation {
  uk: BannerUkMutation
  en: BannerEnMutation
}

input ResultsCaseContentUkMutation {
  title: String
  description: JSON
}

input ResultsCaseContentEnMutation {
  title: String
  description: JSON
}

input ResultsCaseContentMutation {
  uk: ResultsCaseContentUkMutation
  en: ResultsCaseContentEnMutation
}

input ResultsCaseMutation {
  date: String
  content: ResultsCaseContentMutation
  before: String
  after: String
}

input ResultsMutation {
  case: [ResultsCaseMutation]
}

input ReviewsUkCaseMutation {
  date: String
  photo: String
  video: String
  name: String
  telegram: String
  review: JSON
}

input ReviewsUkMutation {
  case: [ReviewsUkCaseMutation]
}

input ReviewsEnCaseMutation {
  date: String
  photo: String
  video: String
  name: String
  telegram: String
  review: JSON
}

input ReviewsEnMutation {
  case: [ReviewsEnCaseMutation]
}

input ReviewsMutation {
  uk: ReviewsUkMutation
  en: ReviewsEnMutation
}

schema {
  query: Query
  mutation: Mutation
}
