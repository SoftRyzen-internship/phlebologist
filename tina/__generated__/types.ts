//@ts-nocheck
// DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
export function gql(strings: TemplateStringsArray, ...args: string[]): string {
  let str = '';
  strings.forEach((string, i) => {
    str += string + (args[i] || '');
  });
  return str;
}
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any };
  JSON: { input: any; output: any };
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};

export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  about: About;
  aboutConnection: AboutConnection;
  banner: Banner;
  bannerConnection: BannerConnection;
  results: Results;
  resultsConnection: ResultsConnection;
  reviews: Reviews;
  reviewsConnection: ReviewsConnection;
};

export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};

export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};

export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};

export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type QueryAboutArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type QueryAboutConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
};

export type QueryBannerArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type QueryBannerConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BannerFilter>;
};

export type QueryResultsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type QueryResultsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ResultsFilter>;
};

export type QueryReviewsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type QueryReviewsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ReviewsFilter>;
};

export type DocumentFilter = {
  about?: InputMaybe<AboutFilter>;
  banner?: InputMaybe<BannerFilter>;
  results?: InputMaybe<ResultsFilter>;
  reviews?: InputMaybe<ReviewsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};

export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = About | Banner | Results | Reviews | Folder;

export type AboutGeneralUkEducation = {
  __typename?: 'AboutGeneralUkEducation';
  institution?: Maybe<Scalars['String']['output']>;
};

export type AboutGeneralUkExperience = {
  __typename?: 'AboutGeneralUkExperience';
  point?: Maybe<Scalars['String']['output']>;
};

export type AboutGeneralUk = {
  __typename?: 'AboutGeneralUk';
  name: Scalars['String']['output'];
  profession: Scalars['String']['output'];
  education?: Maybe<Array<Maybe<AboutGeneralUkEducation>>>;
  experience?: Maybe<Array<Maybe<AboutGeneralUkExperience>>>;
};

export type AboutGeneralEnEducation = {
  __typename?: 'AboutGeneralEnEducation';
  institution?: Maybe<Scalars['String']['output']>;
};

export type AboutGeneralEnExperience = {
  __typename?: 'AboutGeneralEnExperience';
  point?: Maybe<Scalars['String']['output']>;
};

export type AboutGeneralEn = {
  __typename?: 'AboutGeneralEn';
  name: Scalars['String']['output'];
  profession: Scalars['String']['output'];
  education?: Maybe<Array<Maybe<AboutGeneralEnEducation>>>;
  experience?: Maybe<Array<Maybe<AboutGeneralEnExperience>>>;
};

export type AboutGeneral = {
  __typename?: 'AboutGeneral';
  uk?: Maybe<AboutGeneralUk>;
  en?: Maybe<AboutGeneralEn>;
};

export type AboutEducationUkInstitutions = {
  __typename?: 'AboutEducationUkInstitutions';
  institution?: Maybe<Scalars['String']['output']>;
};

export type AboutEducationUk = {
  __typename?: 'AboutEducationUk';
  title: Scalars['String']['output'];
  institutions?: Maybe<Array<Maybe<AboutEducationUkInstitutions>>>;
};

export type AboutEducationEnInstitutions = {
  __typename?: 'AboutEducationEnInstitutions';
  institution?: Maybe<Scalars['String']['output']>;
};

export type AboutEducationEn = {
  __typename?: 'AboutEducationEn';
  title: Scalars['String']['output'];
  institutions?: Maybe<Array<Maybe<AboutEducationEnInstitutions>>>;
};

export type AboutEducation = {
  __typename?: 'AboutEducation';
  uk?: Maybe<AboutEducationUk>;
  en?: Maybe<AboutEducationEn>;
};

export type AboutCareerUkInstitutions = {
  __typename?: 'AboutCareerUkInstitutions';
  period?: Maybe<Scalars['String']['output']>;
  institution?: Maybe<Scalars['String']['output']>;
};

export type AboutCareerUk = {
  __typename?: 'AboutCareerUk';
  title: Scalars['String']['output'];
  institutions?: Maybe<Array<Maybe<AboutCareerUkInstitutions>>>;
};

export type AboutCareerEnInstitutions = {
  __typename?: 'AboutCareerEnInstitutions';
  period?: Maybe<Scalars['String']['output']>;
  institution?: Maybe<Scalars['String']['output']>;
};

export type AboutCareerEn = {
  __typename?: 'AboutCareerEn';
  title: Scalars['String']['output'];
  institutions?: Maybe<Array<Maybe<AboutCareerEnInstitutions>>>;
};

export type AboutCareer = {
  __typename?: 'AboutCareer';
  uk?: Maybe<AboutCareerUk>;
  en?: Maybe<AboutCareerEn>;
};

export type AboutCertificatesDescriptionUk = {
  __typename?: 'AboutCertificatesDescriptionUk';
  alt: Scalars['String']['output'];
};

export type AboutCertificatesDescriptionEn = {
  __typename?: 'AboutCertificatesDescriptionEn';
  alt: Scalars['String']['output'];
};

export type AboutCertificatesDescription = {
  __typename?: 'AboutCertificatesDescription';
  uk?: Maybe<AboutCertificatesDescriptionUk>;
  en?: Maybe<AboutCertificatesDescriptionEn>;
};

export type AboutCertificates = {
  __typename?: 'AboutCertificates';
  photo: Scalars['String']['output'];
  description: AboutCertificatesDescription;
};

export type About = Node &
  Document & {
    __typename?: 'About';
    photo?: Maybe<Scalars['String']['output']>;
    video?: Maybe<Scalars['String']['output']>;
    general: AboutGeneral;
    education: AboutEducation;
    career: AboutCareer;
    certificates: Array<AboutCertificates>;
    id: Scalars['ID']['output'];
    _sys: SystemInfo;
    _values: Scalars['JSON']['output'];
  };

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type AboutGeneralUkEducationFilter = {
  institution?: InputMaybe<StringFilter>;
};

export type AboutGeneralUkExperienceFilter = {
  point?: InputMaybe<StringFilter>;
};

export type AboutGeneralUkFilter = {
  name?: InputMaybe<StringFilter>;
  profession?: InputMaybe<StringFilter>;
  education?: InputMaybe<AboutGeneralUkEducationFilter>;
  experience?: InputMaybe<AboutGeneralUkExperienceFilter>;
};

export type AboutGeneralEnEducationFilter = {
  institution?: InputMaybe<StringFilter>;
};

export type AboutGeneralEnExperienceFilter = {
  point?: InputMaybe<StringFilter>;
};

export type AboutGeneralEnFilter = {
  name?: InputMaybe<StringFilter>;
  profession?: InputMaybe<StringFilter>;
  education?: InputMaybe<AboutGeneralEnEducationFilter>;
  experience?: InputMaybe<AboutGeneralEnExperienceFilter>;
};

export type AboutGeneralFilter = {
  uk?: InputMaybe<AboutGeneralUkFilter>;
  en?: InputMaybe<AboutGeneralEnFilter>;
};

export type AboutEducationUkInstitutionsFilter = {
  institution?: InputMaybe<StringFilter>;
};

export type AboutEducationUkFilter = {
  title?: InputMaybe<StringFilter>;
  institutions?: InputMaybe<AboutEducationUkInstitutionsFilter>;
};

export type AboutEducationEnInstitutionsFilter = {
  institution?: InputMaybe<StringFilter>;
};

export type AboutEducationEnFilter = {
  title?: InputMaybe<StringFilter>;
  institutions?: InputMaybe<AboutEducationEnInstitutionsFilter>;
};

export type AboutEducationFilter = {
  uk?: InputMaybe<AboutEducationUkFilter>;
  en?: InputMaybe<AboutEducationEnFilter>;
};

export type AboutCareerUkInstitutionsFilter = {
  period?: InputMaybe<StringFilter>;
  institution?: InputMaybe<StringFilter>;
};

export type AboutCareerUkFilter = {
  title?: InputMaybe<StringFilter>;
  institutions?: InputMaybe<AboutCareerUkInstitutionsFilter>;
};

export type AboutCareerEnInstitutionsFilter = {
  period?: InputMaybe<StringFilter>;
  institution?: InputMaybe<StringFilter>;
};

export type AboutCareerEnFilter = {
  title?: InputMaybe<StringFilter>;
  institutions?: InputMaybe<AboutCareerEnInstitutionsFilter>;
};

export type AboutCareerFilter = {
  uk?: InputMaybe<AboutCareerUkFilter>;
  en?: InputMaybe<AboutCareerEnFilter>;
};

export type AboutCertificatesDescriptionUkFilter = {
  alt?: InputMaybe<StringFilter>;
};

export type AboutCertificatesDescriptionEnFilter = {
  alt?: InputMaybe<StringFilter>;
};

export type AboutCertificatesDescriptionFilter = {
  uk?: InputMaybe<AboutCertificatesDescriptionUkFilter>;
  en?: InputMaybe<AboutCertificatesDescriptionEnFilter>;
};

export type AboutCertificatesFilter = {
  photo?: InputMaybe<ImageFilter>;
  description?: InputMaybe<AboutCertificatesDescriptionFilter>;
};

export type AboutFilter = {
  photo?: InputMaybe<ImageFilter>;
  video?: InputMaybe<StringFilter>;
  general?: InputMaybe<AboutGeneralFilter>;
  education?: InputMaybe<AboutEducationFilter>;
  career?: InputMaybe<AboutCareerFilter>;
  certificates?: InputMaybe<AboutCertificatesFilter>;
};

export type AboutConnectionEdges = {
  __typename?: 'AboutConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<About>;
};

export type AboutConnection = Connection & {
  __typename?: 'AboutConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AboutConnectionEdges>>>;
};

export type BannerUk = {
  __typename?: 'BannerUk';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
};

export type BannerEn = {
  __typename?: 'BannerEn';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
};

export type Banner = Node &
  Document & {
    __typename?: 'Banner';
    uk?: Maybe<BannerUk>;
    en?: Maybe<BannerEn>;
    id: Scalars['ID']['output'];
    _sys: SystemInfo;
    _values: Scalars['JSON']['output'];
  };

export type BannerUkFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type BannerEnFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type BannerFilter = {
  uk?: InputMaybe<BannerUkFilter>;
  en?: InputMaybe<BannerEnFilter>;
};

export type BannerConnectionEdges = {
  __typename?: 'BannerConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Banner>;
};

export type BannerConnection = Connection & {
  __typename?: 'BannerConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BannerConnectionEdges>>>;
};

export type ResultsCaseContentUk = {
  __typename?: 'ResultsCaseContentUk';
  title: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
};

export type ResultsCaseContentEn = {
  __typename?: 'ResultsCaseContentEn';
  title: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
};

export type ResultsCaseContent = {
  __typename?: 'ResultsCaseContent';
  uk?: Maybe<ResultsCaseContentUk>;
  en?: Maybe<ResultsCaseContentEn>;
};

export type ResultsCase = {
  __typename?: 'ResultsCase';
  date?: Maybe<Scalars['String']['output']>;
  content?: Maybe<ResultsCaseContent>;
  before: Scalars['String']['output'];
  after: Scalars['String']['output'];
};

export type Results = Node &
  Document & {
    __typename?: 'Results';
    case?: Maybe<Array<Maybe<ResultsCase>>>;
    id: Scalars['ID']['output'];
    _sys: SystemInfo;
    _values: Scalars['JSON']['output'];
  };

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ResultsCaseContentUkFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type ResultsCaseContentEnFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
};

export type ResultsCaseContentFilter = {
  uk?: InputMaybe<ResultsCaseContentUkFilter>;
  en?: InputMaybe<ResultsCaseContentEnFilter>;
};

export type ResultsCaseFilter = {
  date?: InputMaybe<DatetimeFilter>;
  content?: InputMaybe<ResultsCaseContentFilter>;
  before?: InputMaybe<ImageFilter>;
  after?: InputMaybe<ImageFilter>;
};

export type ResultsFilter = {
  case?: InputMaybe<ResultsCaseFilter>;
};

export type ResultsConnectionEdges = {
  __typename?: 'ResultsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Results>;
};

export type ResultsConnection = Connection & {
  __typename?: 'ResultsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ResultsConnectionEdges>>>;
};

export type ReviewsUkCase = {
  __typename?: 'ReviewsUkCase';
  date: Scalars['String']['output'];
  photo: Scalars['String']['output'];
  video?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  telegram?: Maybe<Scalars['String']['output']>;
  review?: Maybe<Scalars['JSON']['output']>;
};

export type ReviewsUk = {
  __typename?: 'ReviewsUk';
  case?: Maybe<Array<Maybe<ReviewsUkCase>>>;
};

export type ReviewsEnCase = {
  __typename?: 'ReviewsEnCase';
  date: Scalars['String']['output'];
  photo: Scalars['String']['output'];
  video?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  telegram?: Maybe<Scalars['String']['output']>;
  review?: Maybe<Scalars['JSON']['output']>;
};

export type ReviewsEn = {
  __typename?: 'ReviewsEn';
  case?: Maybe<Array<Maybe<ReviewsEnCase>>>;
};

export type Reviews = Node &
  Document & {
    __typename?: 'Reviews';
    uk?: Maybe<ReviewsUk>;
    en?: Maybe<ReviewsEn>;
    id: Scalars['ID']['output'];
    _sys: SystemInfo;
    _values: Scalars['JSON']['output'];
  };

export type ReviewsUkCaseFilter = {
  date?: InputMaybe<DatetimeFilter>;
  photo?: InputMaybe<ImageFilter>;
  video?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  telegram?: InputMaybe<StringFilter>;
  review?: InputMaybe<RichTextFilter>;
};

export type ReviewsUkFilter = {
  case?: InputMaybe<ReviewsUkCaseFilter>;
};

export type ReviewsEnCaseFilter = {
  date?: InputMaybe<DatetimeFilter>;
  photo?: InputMaybe<ImageFilter>;
  video?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  telegram?: InputMaybe<StringFilter>;
  review?: InputMaybe<RichTextFilter>;
};

export type ReviewsEnFilter = {
  case?: InputMaybe<ReviewsEnCaseFilter>;
};

export type ReviewsFilter = {
  uk?: InputMaybe<ReviewsUkFilter>;
  en?: InputMaybe<ReviewsEnFilter>;
};

export type ReviewsConnectionEdges = {
  __typename?: 'ReviewsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Reviews>;
};

export type ReviewsConnection = Connection & {
  __typename?: 'ReviewsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ReviewsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateAbout: About;
  createAbout: About;
  updateBanner: Banner;
  createBanner: Banner;
  updateResults: Results;
  createResults: Results;
  updateReviews: Reviews;
  createReviews: Reviews;
};

export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};

export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};

export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};

export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};

export type MutationUpdateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};

export type MutationCreateAboutArgs = {
  relativePath: Scalars['String']['input'];
  params: AboutMutation;
};

export type MutationUpdateBannerArgs = {
  relativePath: Scalars['String']['input'];
  params: BannerMutation;
};

export type MutationCreateBannerArgs = {
  relativePath: Scalars['String']['input'];
  params: BannerMutation;
};

export type MutationUpdateResultsArgs = {
  relativePath: Scalars['String']['input'];
  params: ResultsMutation;
};

export type MutationCreateResultsArgs = {
  relativePath: Scalars['String']['input'];
  params: ResultsMutation;
};

export type MutationUpdateReviewsArgs = {
  relativePath: Scalars['String']['input'];
  params: ReviewsMutation;
};

export type MutationCreateReviewsArgs = {
  relativePath: Scalars['String']['input'];
  params: ReviewsMutation;
};

export type DocumentUpdateMutation = {
  about?: InputMaybe<AboutMutation>;
  banner?: InputMaybe<BannerMutation>;
  results?: InputMaybe<ResultsMutation>;
  reviews?: InputMaybe<ReviewsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  about?: InputMaybe<AboutMutation>;
  banner?: InputMaybe<BannerMutation>;
  results?: InputMaybe<ResultsMutation>;
  reviews?: InputMaybe<ReviewsMutation>;
};

export type AboutGeneralUkEducationMutation = {
  institution?: InputMaybe<Scalars['String']['input']>;
};

export type AboutGeneralUkExperienceMutation = {
  point?: InputMaybe<Scalars['String']['input']>;
};

export type AboutGeneralUkMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  profession?: InputMaybe<Scalars['String']['input']>;
  education?: InputMaybe<Array<InputMaybe<AboutGeneralUkEducationMutation>>>;
  experience?: InputMaybe<Array<InputMaybe<AboutGeneralUkExperienceMutation>>>;
};

export type AboutGeneralEnEducationMutation = {
  institution?: InputMaybe<Scalars['String']['input']>;
};

export type AboutGeneralEnExperienceMutation = {
  point?: InputMaybe<Scalars['String']['input']>;
};

export type AboutGeneralEnMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  profession?: InputMaybe<Scalars['String']['input']>;
  education?: InputMaybe<Array<InputMaybe<AboutGeneralEnEducationMutation>>>;
  experience?: InputMaybe<Array<InputMaybe<AboutGeneralEnExperienceMutation>>>;
};

export type AboutGeneralMutation = {
  uk?: InputMaybe<AboutGeneralUkMutation>;
  en?: InputMaybe<AboutGeneralEnMutation>;
};

export type AboutEducationUkInstitutionsMutation = {
  institution?: InputMaybe<Scalars['String']['input']>;
};

export type AboutEducationUkMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  institutions?: InputMaybe<
    Array<InputMaybe<AboutEducationUkInstitutionsMutation>>
  >;
};

export type AboutEducationEnInstitutionsMutation = {
  institution?: InputMaybe<Scalars['String']['input']>;
};

export type AboutEducationEnMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  institutions?: InputMaybe<
    Array<InputMaybe<AboutEducationEnInstitutionsMutation>>
  >;
};

export type AboutEducationMutation = {
  uk?: InputMaybe<AboutEducationUkMutation>;
  en?: InputMaybe<AboutEducationEnMutation>;
};

export type AboutCareerUkInstitutionsMutation = {
  period?: InputMaybe<Scalars['String']['input']>;
  institution?: InputMaybe<Scalars['String']['input']>;
};

export type AboutCareerUkMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  institutions?: InputMaybe<
    Array<InputMaybe<AboutCareerUkInstitutionsMutation>>
  >;
};

export type AboutCareerEnInstitutionsMutation = {
  period?: InputMaybe<Scalars['String']['input']>;
  institution?: InputMaybe<Scalars['String']['input']>;
};

export type AboutCareerEnMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  institutions?: InputMaybe<
    Array<InputMaybe<AboutCareerEnInstitutionsMutation>>
  >;
};

export type AboutCareerMutation = {
  uk?: InputMaybe<AboutCareerUkMutation>;
  en?: InputMaybe<AboutCareerEnMutation>;
};

export type AboutCertificatesDescriptionUkMutation = {
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type AboutCertificatesDescriptionEnMutation = {
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type AboutCertificatesDescriptionMutation = {
  uk?: InputMaybe<AboutCertificatesDescriptionUkMutation>;
  en?: InputMaybe<AboutCertificatesDescriptionEnMutation>;
};

export type AboutCertificatesMutation = {
  photo?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<AboutCertificatesDescriptionMutation>;
};

export type AboutMutation = {
  photo?: InputMaybe<Scalars['String']['input']>;
  video?: InputMaybe<Scalars['String']['input']>;
  general?: InputMaybe<AboutGeneralMutation>;
  education?: InputMaybe<AboutEducationMutation>;
  career?: InputMaybe<AboutCareerMutation>;
  certificates?: InputMaybe<Array<InputMaybe<AboutCertificatesMutation>>>;
};

export type BannerUkMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type BannerEnMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type BannerMutation = {
  uk?: InputMaybe<BannerUkMutation>;
  en?: InputMaybe<BannerEnMutation>;
};

export type ResultsCaseContentUkMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
};

export type ResultsCaseContentEnMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
};

export type ResultsCaseContentMutation = {
  uk?: InputMaybe<ResultsCaseContentUkMutation>;
  en?: InputMaybe<ResultsCaseContentEnMutation>;
};

export type ResultsCaseMutation = {
  date?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<ResultsCaseContentMutation>;
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
};

export type ResultsMutation = {
  case?: InputMaybe<Array<InputMaybe<ResultsCaseMutation>>>;
};

export type ReviewsUkCaseMutation = {
  date?: InputMaybe<Scalars['String']['input']>;
  photo?: InputMaybe<Scalars['String']['input']>;
  video?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  telegram?: InputMaybe<Scalars['String']['input']>;
  review?: InputMaybe<Scalars['JSON']['input']>;
};

export type ReviewsUkMutation = {
  case?: InputMaybe<Array<InputMaybe<ReviewsUkCaseMutation>>>;
};

export type ReviewsEnCaseMutation = {
  date?: InputMaybe<Scalars['String']['input']>;
  photo?: InputMaybe<Scalars['String']['input']>;
  video?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  telegram?: InputMaybe<Scalars['String']['input']>;
  review?: InputMaybe<Scalars['JSON']['input']>;
};

export type ReviewsEnMutation = {
  case?: InputMaybe<Array<InputMaybe<ReviewsEnCaseMutation>>>;
};

export type ReviewsMutation = {
  uk?: InputMaybe<ReviewsUkMutation>;
  en?: InputMaybe<ReviewsEnMutation>;
};

export type AboutPartsFragment = {
  __typename?: 'About';
  photo?: string | null;
  video?: string | null;
  general: {
    __typename: 'AboutGeneral';
    uk?: {
      __typename: 'AboutGeneralUk';
      name: string;
      profession: string;
      education?: Array<{
        __typename: 'AboutGeneralUkEducation';
        institution?: string | null;
      } | null> | null;
      experience?: Array<{
        __typename: 'AboutGeneralUkExperience';
        point?: string | null;
      } | null> | null;
    } | null;
    en?: {
      __typename: 'AboutGeneralEn';
      name: string;
      profession: string;
      education?: Array<{
        __typename: 'AboutGeneralEnEducation';
        institution?: string | null;
      } | null> | null;
      experience?: Array<{
        __typename: 'AboutGeneralEnExperience';
        point?: string | null;
      } | null> | null;
    } | null;
  };
  education: {
    __typename: 'AboutEducation';
    uk?: {
      __typename: 'AboutEducationUk';
      title: string;
      institutions?: Array<{
        __typename: 'AboutEducationUkInstitutions';
        institution?: string | null;
      } | null> | null;
    } | null;
    en?: {
      __typename: 'AboutEducationEn';
      title: string;
      institutions?: Array<{
        __typename: 'AboutEducationEnInstitutions';
        institution?: string | null;
      } | null> | null;
    } | null;
  };
  career: {
    __typename: 'AboutCareer';
    uk?: {
      __typename: 'AboutCareerUk';
      title: string;
      institutions?: Array<{
        __typename: 'AboutCareerUkInstitutions';
        period?: string | null;
        institution?: string | null;
      } | null> | null;
    } | null;
    en?: {
      __typename: 'AboutCareerEn';
      title: string;
      institutions?: Array<{
        __typename: 'AboutCareerEnInstitutions';
        period?: string | null;
        institution?: string | null;
      } | null> | null;
    } | null;
  };
  certificates: Array<{
    __typename: 'AboutCertificates';
    photo: string;
    description: {
      __typename: 'AboutCertificatesDescription';
      uk?: { __typename: 'AboutCertificatesDescriptionUk'; alt: string } | null;
      en?: { __typename: 'AboutCertificatesDescriptionEn'; alt: string } | null;
    };
  }>;
};

export type BannerPartsFragment = {
  __typename?: 'Banner';
  uk?: { __typename: 'BannerUk'; title: string; description: string } | null;
  en?: { __typename: 'BannerEn'; title: string; description: string } | null;
};

export type ResultsPartsFragment = {
  __typename?: 'Results';
  case?: Array<{
    __typename: 'ResultsCase';
    date?: string | null;
    before: string;
    after: string;
    content?: {
      __typename: 'ResultsCaseContent';
      uk?: {
        __typename: 'ResultsCaseContentUk';
        title: string;
        description: any;
      } | null;
      en?: {
        __typename: 'ResultsCaseContentEn';
        title: string;
        description: any;
      } | null;
    } | null;
  } | null> | null;
};

export type ReviewsPartsFragment = {
  __typename?: 'Reviews';
  uk?: {
    __typename: 'ReviewsUk';
    case?: Array<{
      __typename: 'ReviewsUkCase';
      date: string;
      photo: string;
      video?: string | null;
      name: string;
      telegram?: string | null;
      review?: any | null;
    } | null> | null;
  } | null;
  en?: {
    __typename: 'ReviewsEn';
    case?: Array<{
      __typename: 'ReviewsEnCase';
      date: string;
      photo: string;
      video?: string | null;
      name: string;
      telegram?: string | null;
      review?: any | null;
    } | null> | null;
  } | null;
};

export type AboutQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;

export type AboutQuery = {
  __typename?: 'Query';
  about: {
    __typename?: 'About';
    id: string;
    photo?: string | null;
    video?: string | null;
    _sys: {
      __typename?: 'SystemInfo';
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    general: {
      __typename: 'AboutGeneral';
      uk?: {
        __typename: 'AboutGeneralUk';
        name: string;
        profession: string;
        education?: Array<{
          __typename: 'AboutGeneralUkEducation';
          institution?: string | null;
        } | null> | null;
        experience?: Array<{
          __typename: 'AboutGeneralUkExperience';
          point?: string | null;
        } | null> | null;
      } | null;
      en?: {
        __typename: 'AboutGeneralEn';
        name: string;
        profession: string;
        education?: Array<{
          __typename: 'AboutGeneralEnEducation';
          institution?: string | null;
        } | null> | null;
        experience?: Array<{
          __typename: 'AboutGeneralEnExperience';
          point?: string | null;
        } | null> | null;
      } | null;
    };
    education: {
      __typename: 'AboutEducation';
      uk?: {
        __typename: 'AboutEducationUk';
        title: string;
        institutions?: Array<{
          __typename: 'AboutEducationUkInstitutions';
          institution?: string | null;
        } | null> | null;
      } | null;
      en?: {
        __typename: 'AboutEducationEn';
        title: string;
        institutions?: Array<{
          __typename: 'AboutEducationEnInstitutions';
          institution?: string | null;
        } | null> | null;
      } | null;
    };
    career: {
      __typename: 'AboutCareer';
      uk?: {
        __typename: 'AboutCareerUk';
        title: string;
        institutions?: Array<{
          __typename: 'AboutCareerUkInstitutions';
          period?: string | null;
          institution?: string | null;
        } | null> | null;
      } | null;
      en?: {
        __typename: 'AboutCareerEn';
        title: string;
        institutions?: Array<{
          __typename: 'AboutCareerEnInstitutions';
          period?: string | null;
          institution?: string | null;
        } | null> | null;
      } | null;
    };
    certificates: Array<{
      __typename: 'AboutCertificates';
      photo: string;
      description: {
        __typename: 'AboutCertificatesDescription';
        uk?: {
          __typename: 'AboutCertificatesDescriptionUk';
          alt: string;
        } | null;
        en?: {
          __typename: 'AboutCertificatesDescriptionEn';
          alt: string;
        } | null;
      };
    }>;
  };
};

export type AboutConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AboutFilter>;
}>;

export type AboutConnectionQuery = {
  __typename?: 'Query';
  aboutConnection: {
    __typename?: 'AboutConnection';
    totalCount: number;
    pageInfo: {
      __typename?: 'PageInfo';
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      startCursor: string;
      endCursor: string;
    };
    edges?: Array<{
      __typename?: 'AboutConnectionEdges';
      cursor: string;
      node?: {
        __typename?: 'About';
        id: string;
        photo?: string | null;
        video?: string | null;
        _sys: {
          __typename?: 'SystemInfo';
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        general: {
          __typename: 'AboutGeneral';
          uk?: {
            __typename: 'AboutGeneralUk';
            name: string;
            profession: string;
            education?: Array<{
              __typename: 'AboutGeneralUkEducation';
              institution?: string | null;
            } | null> | null;
            experience?: Array<{
              __typename: 'AboutGeneralUkExperience';
              point?: string | null;
            } | null> | null;
          } | null;
          en?: {
            __typename: 'AboutGeneralEn';
            name: string;
            profession: string;
            education?: Array<{
              __typename: 'AboutGeneralEnEducation';
              institution?: string | null;
            } | null> | null;
            experience?: Array<{
              __typename: 'AboutGeneralEnExperience';
              point?: string | null;
            } | null> | null;
          } | null;
        };
        education: {
          __typename: 'AboutEducation';
          uk?: {
            __typename: 'AboutEducationUk';
            title: string;
            institutions?: Array<{
              __typename: 'AboutEducationUkInstitutions';
              institution?: string | null;
            } | null> | null;
          } | null;
          en?: {
            __typename: 'AboutEducationEn';
            title: string;
            institutions?: Array<{
              __typename: 'AboutEducationEnInstitutions';
              institution?: string | null;
            } | null> | null;
          } | null;
        };
        career: {
          __typename: 'AboutCareer';
          uk?: {
            __typename: 'AboutCareerUk';
            title: string;
            institutions?: Array<{
              __typename: 'AboutCareerUkInstitutions';
              period?: string | null;
              institution?: string | null;
            } | null> | null;
          } | null;
          en?: {
            __typename: 'AboutCareerEn';
            title: string;
            institutions?: Array<{
              __typename: 'AboutCareerEnInstitutions';
              period?: string | null;
              institution?: string | null;
            } | null> | null;
          } | null;
        };
        certificates: Array<{
          __typename: 'AboutCertificates';
          photo: string;
          description: {
            __typename: 'AboutCertificatesDescription';
            uk?: {
              __typename: 'AboutCertificatesDescriptionUk';
              alt: string;
            } | null;
            en?: {
              __typename: 'AboutCertificatesDescriptionEn';
              alt: string;
            } | null;
          };
        }>;
      } | null;
    } | null> | null;
  };
};

export type BannerQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;

export type BannerQuery = {
  __typename?: 'Query';
  banner: {
    __typename?: 'Banner';
    id: string;
    _sys: {
      __typename?: 'SystemInfo';
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    uk?: { __typename: 'BannerUk'; title: string; description: string } | null;
    en?: { __typename: 'BannerEn'; title: string; description: string } | null;
  };
};

export type BannerConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BannerFilter>;
}>;

export type BannerConnectionQuery = {
  __typename?: 'Query';
  bannerConnection: {
    __typename?: 'BannerConnection';
    totalCount: number;
    pageInfo: {
      __typename?: 'PageInfo';
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      startCursor: string;
      endCursor: string;
    };
    edges?: Array<{
      __typename?: 'BannerConnectionEdges';
      cursor: string;
      node?: {
        __typename?: 'Banner';
        id: string;
        _sys: {
          __typename?: 'SystemInfo';
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        uk?: {
          __typename: 'BannerUk';
          title: string;
          description: string;
        } | null;
        en?: {
          __typename: 'BannerEn';
          title: string;
          description: string;
        } | null;
      } | null;
    } | null> | null;
  };
};

export type ResultsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;

export type ResultsQuery = {
  __typename?: 'Query';
  results: {
    __typename?: 'Results';
    id: string;
    _sys: {
      __typename?: 'SystemInfo';
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    case?: Array<{
      __typename: 'ResultsCase';
      date?: string | null;
      before: string;
      after: string;
      content?: {
        __typename: 'ResultsCaseContent';
        uk?: {
          __typename: 'ResultsCaseContentUk';
          title: string;
          description: any;
        } | null;
        en?: {
          __typename: 'ResultsCaseContentEn';
          title: string;
          description: any;
        } | null;
      } | null;
    } | null> | null;
  };
};

export type ResultsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ResultsFilter>;
}>;

export type ResultsConnectionQuery = {
  __typename?: 'Query';
  resultsConnection: {
    __typename?: 'ResultsConnection';
    totalCount: number;
    pageInfo: {
      __typename?: 'PageInfo';
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      startCursor: string;
      endCursor: string;
    };
    edges?: Array<{
      __typename?: 'ResultsConnectionEdges';
      cursor: string;
      node?: {
        __typename?: 'Results';
        id: string;
        _sys: {
          __typename?: 'SystemInfo';
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        case?: Array<{
          __typename: 'ResultsCase';
          date?: string | null;
          before: string;
          after: string;
          content?: {
            __typename: 'ResultsCaseContent';
            uk?: {
              __typename: 'ResultsCaseContentUk';
              title: string;
              description: any;
            } | null;
            en?: {
              __typename: 'ResultsCaseContentEn';
              title: string;
              description: any;
            } | null;
          } | null;
        } | null> | null;
      } | null;
    } | null> | null;
  };
};

export type ReviewsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;

export type ReviewsQuery = {
  __typename?: 'Query';
  reviews: {
    __typename?: 'Reviews';
    id: string;
    _sys: {
      __typename?: 'SystemInfo';
      filename: string;
      basename: string;
      breadcrumbs: Array<string>;
      path: string;
      relativePath: string;
      extension: string;
    };
    uk?: {
      __typename: 'ReviewsUk';
      case?: Array<{
        __typename: 'ReviewsUkCase';
        date: string;
        photo: string;
        video?: string | null;
        name: string;
        telegram?: string | null;
        review?: any | null;
      } | null> | null;
    } | null;
    en?: {
      __typename: 'ReviewsEn';
      case?: Array<{
        __typename: 'ReviewsEnCase';
        date: string;
        photo: string;
        video?: string | null;
        name: string;
        telegram?: string | null;
        review?: any | null;
      } | null> | null;
    } | null;
  };
};

export type ReviewsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ReviewsFilter>;
}>;

export type ReviewsConnectionQuery = {
  __typename?: 'Query';
  reviewsConnection: {
    __typename?: 'ReviewsConnection';
    totalCount: number;
    pageInfo: {
      __typename?: 'PageInfo';
      hasPreviousPage: boolean;
      hasNextPage: boolean;
      startCursor: string;
      endCursor: string;
    };
    edges?: Array<{
      __typename?: 'ReviewsConnectionEdges';
      cursor: string;
      node?: {
        __typename?: 'Reviews';
        id: string;
        _sys: {
          __typename?: 'SystemInfo';
          filename: string;
          basename: string;
          breadcrumbs: Array<string>;
          path: string;
          relativePath: string;
          extension: string;
        };
        uk?: {
          __typename: 'ReviewsUk';
          case?: Array<{
            __typename: 'ReviewsUkCase';
            date: string;
            photo: string;
            video?: string | null;
            name: string;
            telegram?: string | null;
            review?: any | null;
          } | null> | null;
        } | null;
        en?: {
          __typename: 'ReviewsEn';
          case?: Array<{
            __typename: 'ReviewsEnCase';
            date: string;
            photo: string;
            video?: string | null;
            name: string;
            telegram?: string | null;
            review?: any | null;
          } | null> | null;
        } | null;
      } | null;
    } | null> | null;
  };
};

export const AboutPartsFragmentDoc = gql`
  fragment AboutParts on About {
    photo
    video
    general {
      __typename
      uk {
        __typename
        name
        profession
        education {
          __typename
          institution
        }
        experience {
          __typename
          point
        }
      }
      en {
        __typename
        name
        profession
        education {
          __typename
          institution
        }
        experience {
          __typename
          point
        }
      }
    }
    education {
      __typename
      uk {
        __typename
        title
        institutions {
          __typename
          institution
        }
      }
      en {
        __typename
        title
        institutions {
          __typename
          institution
        }
      }
    }
    career {
      __typename
      uk {
        __typename
        title
        institutions {
          __typename
          period
          institution
        }
      }
      en {
        __typename
        title
        institutions {
          __typename
          period
          institution
        }
      }
    }
    certificates {
      __typename
      photo
      description {
        __typename
        uk {
          __typename
          alt
        }
        en {
          __typename
          alt
        }
      }
    }
  }
`;
export const BannerPartsFragmentDoc = gql`
  fragment BannerParts on Banner {
    uk {
      __typename
      title
      description
    }
    en {
      __typename
      title
      description
    }
  }
`;
export const ResultsPartsFragmentDoc = gql`
  fragment ResultsParts on Results {
    case {
      __typename
      date
      content {
        __typename
        uk {
          __typename
          title
          description
        }
        en {
          __typename
          title
          description
        }
      }
      before
      after
    }
  }
`;
export const ReviewsPartsFragmentDoc = gql`
  fragment ReviewsParts on Reviews {
    uk {
      __typename
      case {
        __typename
        date
        photo
        video
        name
        telegram
        review
      }
    }
    en {
      __typename
      case {
        __typename
        date
        photo
        video
        name
        telegram
        review
      }
    }
  }
`;
export const AboutDocument = gql`
  query about($relativePath: String!) {
    about(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...AboutParts
    }
  }
  ${AboutPartsFragmentDoc}
`;
export const AboutConnectionDocument = gql`
  query aboutConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: AboutFilter
  ) {
    aboutConnection(
      before: $before
      after: $after
      first: $first
      last: $last
      sort: $sort
      filter: $filter
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...AboutParts
        }
      }
    }
  }
  ${AboutPartsFragmentDoc}
`;
export const BannerDocument = gql`
  query banner($relativePath: String!) {
    banner(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...BannerParts
    }
  }
  ${BannerPartsFragmentDoc}
`;
export const BannerConnectionDocument = gql`
  query bannerConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: BannerFilter
  ) {
    bannerConnection(
      before: $before
      after: $after
      first: $first
      last: $last
      sort: $sort
      filter: $filter
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...BannerParts
        }
      }
    }
  }
  ${BannerPartsFragmentDoc}
`;
export const ResultsDocument = gql`
  query results($relativePath: String!) {
    results(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...ResultsParts
    }
  }
  ${ResultsPartsFragmentDoc}
`;
export const ResultsConnectionDocument = gql`
  query resultsConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: ResultsFilter
  ) {
    resultsConnection(
      before: $before
      after: $after
      first: $first
      last: $last
      sort: $sort
      filter: $filter
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...ResultsParts
        }
      }
    }
  }
  ${ResultsPartsFragmentDoc}
`;
export const ReviewsDocument = gql`
  query reviews($relativePath: String!) {
    reviews(relativePath: $relativePath) {
      ... on Document {
        _sys {
          filename
          basename
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
      ...ReviewsParts
    }
  }
  ${ReviewsPartsFragmentDoc}
`;
export const ReviewsConnectionDocument = gql`
  query reviewsConnection(
    $before: String
    $after: String
    $first: Float
    $last: Float
    $sort: String
    $filter: ReviewsFilter
  ) {
    reviewsConnection(
      before: $before
      after: $after
      first: $first
      last: $last
      sort: $sort
      filter: $filter
    ) {
      pageInfo {
        hasPreviousPage
        hasNextPage
        startCursor
        endCursor
      }
      totalCount
      edges {
        cursor
        node {
          ... on Document {
            _sys {
              filename
              basename
              breadcrumbs
              path
              relativePath
              extension
            }
            id
          }
          ...ReviewsParts
        }
      }
    }
  }
  ${ReviewsPartsFragmentDoc}
`;
export type Requester<C = {}> = <R, V>(
  doc: DocumentNode,
  vars?: V,
  options?: C,
) => Promise<R>;
export function getSdk<C>(requester: Requester<C>) {
  return {
    about(
      variables: AboutQueryVariables,
      options?: C,
    ): Promise<{
      data: AboutQuery;
      variables: AboutQueryVariables;
      query: string;
    }> {
      return requester<
        { data: AboutQuery; variables: AboutQueryVariables; query: string },
        AboutQueryVariables
      >(AboutDocument, variables, options);
    },
    aboutConnection(
      variables?: AboutConnectionQueryVariables,
      options?: C,
    ): Promise<{
      data: AboutConnectionQuery;
      variables: AboutConnectionQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: AboutConnectionQuery;
          variables: AboutConnectionQueryVariables;
          query: string;
        },
        AboutConnectionQueryVariables
      >(AboutConnectionDocument, variables, options);
    },
    banner(
      variables: BannerQueryVariables,
      options?: C,
    ): Promise<{
      data: BannerQuery;
      variables: BannerQueryVariables;
      query: string;
    }> {
      return requester<
        { data: BannerQuery; variables: BannerQueryVariables; query: string },
        BannerQueryVariables
      >(BannerDocument, variables, options);
    },
    bannerConnection(
      variables?: BannerConnectionQueryVariables,
      options?: C,
    ): Promise<{
      data: BannerConnectionQuery;
      variables: BannerConnectionQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: BannerConnectionQuery;
          variables: BannerConnectionQueryVariables;
          query: string;
        },
        BannerConnectionQueryVariables
      >(BannerConnectionDocument, variables, options);
    },
    results(
      variables: ResultsQueryVariables,
      options?: C,
    ): Promise<{
      data: ResultsQuery;
      variables: ResultsQueryVariables;
      query: string;
    }> {
      return requester<
        { data: ResultsQuery; variables: ResultsQueryVariables; query: string },
        ResultsQueryVariables
      >(ResultsDocument, variables, options);
    },
    resultsConnection(
      variables?: ResultsConnectionQueryVariables,
      options?: C,
    ): Promise<{
      data: ResultsConnectionQuery;
      variables: ResultsConnectionQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: ResultsConnectionQuery;
          variables: ResultsConnectionQueryVariables;
          query: string;
        },
        ResultsConnectionQueryVariables
      >(ResultsConnectionDocument, variables, options);
    },
    reviews(
      variables: ReviewsQueryVariables,
      options?: C,
    ): Promise<{
      data: ReviewsQuery;
      variables: ReviewsQueryVariables;
      query: string;
    }> {
      return requester<
        { data: ReviewsQuery; variables: ReviewsQueryVariables; query: string },
        ReviewsQueryVariables
      >(ReviewsDocument, variables, options);
    },
    reviewsConnection(
      variables?: ReviewsConnectionQueryVariables,
      options?: C,
    ): Promise<{
      data: ReviewsConnectionQuery;
      variables: ReviewsConnectionQueryVariables;
      query: string;
    }> {
      return requester<
        {
          data: ReviewsConnectionQuery;
          variables: ReviewsConnectionQueryVariables;
          query: string;
        },
        ReviewsConnectionQueryVariables
      >(ReviewsConnectionDocument, variables, options);
    },
  };
}
export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from 'tinacms/dist/client';

const generateRequester = (
  client: TinaClient,
  options?: { branch?: string },
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: { branch?: string },
    client,
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl;
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/');
      url = client.apiUrl.substring(0, index + 1) + options.branch;
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    });

    return { data: data?.data, query: doc, variables: vars || {} };
  };

  return requester;
};

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: 'https://content.tinajs.io/1.4/content/112741f1-bcd7-4118-ba69-e56683058d98/github/main',
        queries,
      }),
    ),
  );

export const queries = (
  client: TinaClient,
  options?: {
    branch?: string;
  },
) => {
  const requester = generateRequester(client, options);
  return getSdk(requester);
};
